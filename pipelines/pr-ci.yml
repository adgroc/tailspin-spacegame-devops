trigger: none

variables:
  buildConfiguration: 'Release'
  dotnetSdkVersion: '3.1.100'

stages:
  - stage: 'Build'
    displayName: 'Build the web application'
    jobs:
    - job: 'Build'
      displayName: 'Build web app job'
      pool:
        vmImage: 'ubuntu-16.04'
        demands:
          - npm

      variables:
        wwwrootDir: 'Tailspin.SpaceGame.Web/wwwroot'
        dotnetSdkVersion: '3.1.100'

      steps:
      - task: DotNetCoreInstaller@2
        displayName: 'Use .NET Core SDK $(dotnetSdkVersion)'
        inputs:
          version: '$(dotnetSdkVersion)'

      - task: Npm@1
        displayName: 'Run npm install'
        inputs:
          verbose: false

      - script: './node_modules/.bin/node-sass $(wwwrootDir) --output $(wwwrootDir)'
        displayName: 'Compile Sass assets'

      - task: gulp@1
        displayName: 'Run gulp tasks'

      - script: 'echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)" > buildinfo.txt'
        displayName: 'Write build info'
        workingDirectory: $(wwwrootDir)

      #Restore project dependencies
      - task: DotNetCoreCLI@2
        displayName: 'Restore project dependencies'
        inputs:
          command: 'restore'
          projects: '**/*.csproj'

      #Build the web application project
      - task: DotNetCoreCLI@2
        displayName: 'Build the project - $(buildConfiguration)'
        inputs:
          command: 'build'
          arguments: '--no-restore --configuration $(buildConfiguration)'
          projects: '**/*.csproj'

      #Install the report generator tool used for code coverage
      - task: DotNetCoreCLI@2
        displayName: 'Install ReportGenerator'
        inputs:
          command: custom
          custom: tool
          arguments: 'install --global dotnet-reportgenerator-globaltool'
      
      #Run unit tests, capturing code coverage metrics
      - task: DotNetCoreCLI@2
        displayName: 'Run unit tests - $(buildConfiguration)'
        inputs:
          command: 'test'
          arguments: '--no-build --configuration $(buildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=$(Build.SourcesDirectory)/TestResults/Coverage/'
          publishTestResults: true
          projects: '**/*.Tests.csproj'
      
      #Create code coverage report
      - script: |
          reportgenerator -reports:$(Build.SourcesDirectory)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/CodeCoverage -reporttypes:HtmlInline_AzurePipelines
        displayName: 'Create code coverage report'
      
      #Publish code coverage report
      - task: PublishCodeCoverageResults@1
        displayName: 'Publish code coverage report'
        inputs:
          codeCoverageTool: 'cobertura'
          summaryFileLocation: '$(Build.SourcesDirectory)/**/coverage.cobertura.xml'

      #Publish the project
      - task: DotNetCoreCLI@2
        displayName: 'Publish the project - $(buildConfiguration)'
        inputs:
          command: 'publish'
          projects: '**/*.csproj'
          publishWebProjects: false
          arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
          zipAfterPublish: true

      #Run WhiteSource Bolt
      - task: WhiteSource Bolt@20
        displayName: 'Run WhiteSource Bolt'

      #Publish build artifacts
      - task: PublishBuildArtifacts@1
        displayName: 'Publish Artifact: drop'
        condition: succeeded()

    - job: BuildDacpac
      dependsOn: Build
      displayName: "Build dacpac job"
      pool:
        vmImage: 'windows-2019'

      steps:
      - task: DotNetCoreCLI@2
        displayName: 'Restore project dependencies'
        inputs:
          command: 'restore'
          projects: '**/*.csproj'
    
      #Build the database project
      - task: VSBuild@1
        displayName: 'Build the database project'
        inputs:
          project: '**/*.sqlproj'
    

    
      #Copy dacpac to staging directory
      - task: CopyFiles@2
        displayName: 'Copy dacpac file to staging directory'
        inputs:
          contents: |
            Tailspin.SpaceGame.Database/bin/**/*.dacpac
          targetFolder: '$(Build.StagingDirectory)'
    
      #Publish dacpac 
      - task: PublishBuildArtifacts@1
        displayName: 'Publish Artifact'
        inputs:
          pathToPublish: '$(Build.ArtifactStagingDirectory)'
          artifactName: dropDacpac
        condition: succeededOrFailed()